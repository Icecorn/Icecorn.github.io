{"meta":{"title":"Blog of Icecorn","subtitle":"","description":"","author":"Icecorn","url":"http://Icecorn.github.io","root":"/"},"pages":[{"title":"tags","date":"2022-02-09T10:53:15.000Z","updated":"2022-06-29T10:53:59.303Z","comments":true,"path":"tags/index.html","permalink":"http://icecorn.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"计算机网络--应用层","slug":"计算机网络--应用层","date":"2022-02-16T11:25:30.000Z","updated":"2022-06-29T10:21:15.875Z","comments":true,"path":"2022/02/16/计算机网络--应用层/","link":"","permalink":"http://icecorn.github.io/2022/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C--%E5%BA%94%E7%94%A8%E5%B1%82/","excerpt":"","text":"计算机网络–应用层本章主要掌握各种应用层协议的使用方法和实现方法 常见的基于UDP和TCP的应用 1 域名系统DNS我们打开一个网页比如百度通常是使用www.baidu.com而不是它的ip地址加端口号，这就是靠域名服务器进行域名解析实现的。主机发送DNS请求报文（使用UDP）给**域名服务器**，收到响应中的ip地址后可与目的主机进行通信。 全球只用一个域名服务器显然是不现实的，所以域名服务器实际上是一个分布式系统，并且按如下划分了域名空间 权限域名服务器：负责一个区的域名服务器，一般是一个公司内部的，比如可以划分abc.com和y.abc.com 本地域名服务器：又叫做默认域名服务器，一般是离主机最近的服务器 主机向本地域名服务器的查询一般采用递归查询 本地服务器向根服务器的查询一般采用迭代查询，当然也可以用递归查询 递归查询就是自己只发送一次查询报文然后剩下的一层层处理最后拿个结果就好了（小弟派小弟层层转包） 迭代查询是自己发送查询接收响应反复操作最后得到结果（事必躬亲） 2 文件传送协议FTP基于TCP，TFTP基于UDP 2.1 FTP协议FTP使用客户服务器方式，FTP服务器由一个主进程和若干个从属进程组成，这是因为FTP服务器要接收好多个客户的请求，每次和一个客户连接后马上给这个客户分配几个从属进程，快点把主进程空出来给别的客户访问 对于一个主机来说，与服务器一般建立两个TCP连接，一个控制进程，一个数据传送进程，通信中控制进程一直连接着吗，因此FTP控制信息是带外的 TCP只能整体传送文件，这就有了网络文件系统NFS，它可以允许应用程序只读取并修改指定位置的信息，减少了通信量 2.2 TFTP协议基于UDP的超级简单的协议，只支持传输不支持交互 优点： 多个主机同时从服务器下载东西（因为UDP可以一对多嘛，可以理解类似于多播） 开销小，占内存小，这就适合很多不需要太多功能的开源硬件 另外虽然UDP是不可靠传输，但TFTP类似与停止等待协议，这就是靠应用层实现传输控制来保证的 2.3 远程终端协议TELNET用来远程控制桌面的东东，只需要知道怎么用以及它是基于TCP的就ok 3 万维网协议就是我们熟悉的www啦，了解万维网，主要了解一下几个问题： 怎样标志分布在整个互联网上的各种万维网文档？ URL 用什么协议实现万维网的连接？ HTTP 不同风格的文档在不同主机怎么显示？ HTML 怎样查找需要的信息？ 搜索引擎 3.1 统一资源定位符URL相当于互联网上任一文件的指针，一般形式为： &lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt; 协议常见的有http，ftp等，端口和路径可以省略 3.2 超文本传输协议HTTPHTTP是面向事务的应用层协议，基于TCP 特点： 无连接的：意思就是http不用先建立连接再通信，因为是基于TCP的，由TCP来保证可靠传输 无状态的： 意思是同一个客户再来访问结果还是一样，服务器不会记得 面向文本： 意思是http报文中的每一个字段都是一些ASCII码，长度是由用户输入决定的 http首先要与服务器建立TCP连接，这就需要3次握手，由传输层的知识我们知道这样就会导致客户实际收到消息时需要2RTT的时间间隔，而http1.0协议使用非持续传输，意思就是访问这个网页（服务器不同路径）上的任何一个元素都需要重新建立TCP连接，这就会浪费好多个2RTT时间 所以http1.1采用了持续连接，意思就是访问同一个服务器上东西的时候TCP连接不用断开，就用着一个就完事了，省下来很多握手时间，具体方式还分为流水线和非流水线方式，不赘述了 代理服务器，又叫做万维网高速缓存 这玩意就是保存了一个局域网内最近主机的请求和响应信息，当又有主机访问相同的资源的时候就不用再去远端查找了。这就减少了链路的通信量。 HTTP的报文结构 主要就是请求报文和响应报文 3.3 万维网文档超文本标记语言HTML：用于在浏览器上显示数据 可扩展标记语言XML： 用于传输数据 可扩展超文本标记语言XHTML： 更严格的html版本 层叠样式表CSS： 用于定义html文档布局 动态文档 上述都是静态文档，而动态文档只是文档的生成方法不同，静态文档只要放在服务器上就ok了，动态文档允许客户和服务器进行交互，也就是说服务器获取到客户的信息后进行一系列处理之后生成文档 这就需要在服务器中新增加一个应用程序叫做CGI程序，也叫作CGI脚本。 活动文档 它是用来满足更复杂的需求比如动画交互之类的，如果一直让服务器来传送的话太浪费资源，所以活动文档相当于是在服务器上的一个静态文档，类似一个浏览器可执行的小应用程序，现在常用的JS脚本 3.4 万维网的信息检索系统分为两种： 全文检索搜索： 比如谷歌百度这种，本质是使用爬虫在数据库里搜索相关信息 分类目录搜索： 比如门户网站这些，已经给你分配好了的专栏 4 电子邮件主要涉及简单邮件传送协议SMTP，互联网邮件扩充MIME，邮局协议POP3，网际报文存取协议IMAP 要注意的是这些都是基于TCP的 上图基本给出了用户代理，发送方和接收方邮件服务器的作用 由于SMTP有以下缺点： 不能传送可执行文件和其他的二进制对象 只能传送7位的ASCII码，导致其他国家文字不能传输 SMTP服务器会拒绝超出一定长度的邮件 将制表符tab转换为若干个空格 由此提出了互联网扩充协议MIME 具体看书吧，记住有了MIME实现了上述这些功能就行了 两种接收协议的特点： POP3： 优点：简单 缺点：邮件读了后就自动删除了 IMAP： 优点：可以在不同主机上随时处理邮件服务器的邮件，支持阅读部分邮件 缺点：必须上网连接IMAP服务器才能阅读邮件 互联网邮箱： 现在多数都是这些，记住浏览器和互联网上的邮件服务器通信使用的是HTTP协议，而邮件服务器之间通信使用SMTP即可 5 动态主机配置协议DHCPDCHP使用UDP进行传输。就是动态的分配IP地址，子网掩码，默认路由地址，域名服务器地址（就是我们常用的自动配置IP） 一个新的主机第一次连接到一个网络，按照以下步骤： 主机发送广播（目的地址全1）给网络中的DCHP中继代理（一般是一个路由器） 路由器发送单播告诉DCHP服务器 DCHP发送响应给主机A 注意两点： 主机在一个网络中连了一次网，分配的IP就记录在DCHP服务器中了，下次联网还是这个IP地址 给了IP地址后，不是一直可以使用的，有一个租用期，长短有DCHP服务器控制，过半后主机发送续租报文，服务器同意就续上，不同意就不能用这个IP了 6 P2P应用6.1 集中服务器的P2P工作方式在集中式目录服务器中建立一个数据库保存哪个资源都哪些主机有，这是要想下载一个东西就先去集中服务器查找，返回一串主机，在选一个主机进行下载 6.2 全分布式结构P2P共享程序使用洪泛法，在网络内进行有限范围的洪泛查询，具有代表性的就是BT种子了（某播：技术是无罪的==） P2P的本质就是惠人惠己，比如我们要下载一部小电影，实际上在p2p网络中这个小电影是由好多个文件块组成的，有好多主机上边都有这些文件块，可能这个给你一块那个给你一块那么我们就能很快把这个小电影下载完，当然之后我们电脑上有这个文件了（即使一些文件块）也要给别人下载，不能太自私啦。这些和我们互相交互下载文件块的主机叫做对等方。 同时在发送过程中有两个规则： 最稀有优先：意思就是小电影中哪个文件块在现在网上拥有的数目最少就要先下载哪个，不然那些主机都下线最后少了这个文件块导致看不了小电影就很难受QAQ 优先发送对等方选择：前面说我们也要给别人下载，那么怎么确定优先给谁发呢？当然要优先发给给我们发送文件块的对等方了（按速率排序，互惠互利）。一般保持4个最高速的对等方，这些对等方叫已疏通的或无障碍的对等方 还有一个问题就是分布式结构到底怎么确定小电影在哪些主机上有呢？ 洪泛法的效率太低且浪费资源，所以最好还是建立一个分布式数据库，又不能像集中式服务器那样，所以现在有个算法是分布式散列表，具体内容再看吧QAQ 7 应用进程和系统调用我们知道程序员的业务逻辑代码基本都是在应用层，对运输层的控制很少（只能设置最大数据长度MSS等），那么进行网络编程时实际上都是使用API（也可以说套接字）来对接操作系统从而实现网络通信 进行TCP的基本API调用流程如下，细节的话联系操作系统","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://icecorn.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://icecorn.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}]},{"title":"计算机网络--运输层","slug":"计算机网络--运输层","date":"2022-02-14T06:16:07.000Z","updated":"2022-06-29T10:20:45.416Z","comments":true,"path":"2022/02/14/计算机网络--运输层/","link":"","permalink":"http://icecorn.github.io/2022/02/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C--%E8%BF%90%E8%BE%93%E5%B1%82/","excerpt":"","text":"计算机网络–运输层1. 运输层基本概念运输层向应用层提供通信服务，在运输层中，通信的真正端点不是主机而是主机中的进程 网络层为主机之间提供逻辑通信，运输层为应用进程提供端到端的逻辑通信 运输层连个主要协议： 用户数据报协议UDP（不用连接） 传输控制协议TCP（面向连接） 运输层支持复用和分用，方法是使用协议端口号（端口） 这里的端口号是指软件端口，分为两大类： 服务器端使用的端口号 1.熟知端口号（系统端口号）： 0~1023 比如FTP是21 2.登记算口号： 1024~49151 其他应用使用的 客户端使用的端口号 数值49152~65535 在客户进程运行时才动态选择，又叫短暂端口号 ，在不同主机可以随意分配 2 用户数据报协议UDPUDP在IP数据报服务上增加了复用分用功能和差错检测功能 主要特点： 是无连接的 尽最大努力交付： 即不保证可靠交付 是面向报文的： 意思是UDP接收到应用层报文不做任何操作仅仅加上UDP首部就构成了UDP报文，这就要求应用层控制报文大小（太大会导致IP报文需要分片，太小导致传输效率太低） 没有拥塞控制 支持1对1,1对多，多对1，多对多的交互通信 首部开销小： 只有8字节 UDP 首部格式 首部共8字节，四个字段，分别是源端口 目的端口 长度（UDP报文总长度，最小为8只有首部） 检验和 每个字段2字节 伪首部只在计算检验和时被用于计算，检验方法类似IP数据报首部校验方法，区别是UDP的校验是把首部和数据部分一起都检验 3 传输控制协议TCPTCP具有可靠传输，流量控制，拥塞控制等等功能 主要特点： 面向连接：通信前必须建立TCP连接 点对点：每一条TCP连接只能有两个端点，即只能1对1传输 提供可靠交付： 无差错，不丢失，不重复，按序到达 全双工通信：TCP连接两端设有发送缓存和接收缓存 面向字节流：对TCP来说应用程序发送的数据仅仅看成一连串无结构的字节流，TCP不理解这些玩意代表啥意思，只是必须把这些字节流按照顺序完整的传达到终点，它的任务就完成了。解析的活就交给终端处理就好 这里有一个UDP与TCP的差别就是，UDP发送的报文长度是应用进程给出的，而TCP是根据对方的窗口值和网络拥塞之类的自己判断（如果应用数据太长就分几段，太短就攒几个一起发） TCP连接的端点叫套接字socket，将端口号拼接到IP地址就是套接字 比如 192.3.4.5:80 TCP把连接作为最基本的抽象，每条TCP连接唯一的被通信两端的套接字确定 TCP连接::={socket1,socket2}={(IP1:port1),(IP2,port2)} 4 TCP报文段首部格式TCP首部前20字节是固定的，后边可根据需要增加4n字节 源端口和目的端口：各占2字节，目的是实现分用 序号：4字节，TCP是面向字节流的，所以该字段是指本报文段所发送的第一个字节的序号 确认号：4字节，是期望收到对方下一个报文段的第一个数据字节序号 数据偏移：4位，和IP数据报中的首部长度类似，表示的是TCP首部的实际长度（最大二进制15,4字节为单位，所以TCP首部最大也是60字节） 保留：目前没用，置0 紧急URG：1位，置1时代表高优先级优先发送 确认ACK：1位，置1时才有效，TCP连接建立后所有报文ACK都为1 推送PSH：1位，表示接收端收到就上交给应用层（不用少量信息攒一波），很少用 复位RST：1位，TCP连接出现严重差错，该字段置1重建连接 同步SYN：1位，建立连接时用来同步序号，置1表示这是一个连接请求或连接接受报文 终止FIN：1位，用来释放一个连接，置1表示发送方数据发送完毕，请求释放运输连接 窗口：2字节，是指发送本报文段的一方的接收窗口 检验和：2字节，检验首部和数据两部分，和UDP一样计算时也加伪首部 紧急指针：2字节，仅在URG置1时有意义，指出紧急数据在的末尾在此报文段中的位置 选项：长度可变，最多40字节 5 可靠传输的原理和实现TCP是面向连接且可靠的传输协议，理想的传输协议需要具备以下两点： 传输信道不产生差错 不管发送方以多快的速度发送分组，接收端总能正确接收并处理 5.1 停止等待协议停止等待是最简单的可靠传输，A发生完一个分组就停止发送等待对方的确认 超时重传：当发送方发送的分组出现差错没有送达接收方，就会启动超时重传机制，A每发送一个分组立刻设置一个超时计时器。这里有三点需要注意： A发送一个分组后，必须暂时保留该分组副本，收到确认后才删除 分组和确认分组都要进行编号，对于停止等待来说 0和1两个编号循环使用就行 超时重传时间应该设置的比数据传输的平均往返时间长一些 确认丢失时B忽略第二次收到的重复分组并发送确认给A 确认迟到B同样忽略第二次收到的重复分组，A忽略重复确认 这样我们就在不可靠的传输网络上实现了可靠通信，这种可靠传输协议叫做自动重传请求ARQ 5.2 流水线传输停止等待协议的优点是简单，但缺点是信道利用率太低，所以出现了流水线传输。流水线传输需要用到连续ARQ协议，回退N帧（gobackN）协议，滑动窗口协议等等 连续ARQ协议： 发送方根据接收方的窗口参数和自身的发送缓存决定窗口大小，窗口内的分组都是可以发送的，每收到一个确认窗口就向前移动一个分组 累计确认：接收方不用每收到一个分组就发送一条确认，而是攒几个发送一个确认（按序到达的最后一个分组编号）即可。 累计确认的优点是容易实现，减少了通信量，即使确认丢失也不用重传。 累计确认的缺点是不能向发送方反应已经正确收到的所有分组信息 比如发送了前5个分组，接收方收到了1 2 4 5，那么接收方直接发送收到了2，这样发送方就必须重新发送3 4 5，哪怕4 5 已经收到了，这就叫做回退N帧协议（Go-back-N） 5.3 滑动窗口协议滑动窗口协议其实就是以字节为单位的连续ARQ协议，但是研究的时候通常也可以以分组为单位研究 这里要注意以下几点： A根据B可接收的窗口大小和A的发送缓存大小（取较小值）来确定A的发送窗口，当然有时还可以根据拥塞状况适当减小。 发送窗口中已发送数据在没收到确认之前不能删除 接收方一定要支持累计确认功能，减小传输开销 TCP是全双工通信，通信双方都有发送窗口和接收窗口 5.4 超时重传时间的选择重传时间的选择是TCP中最复杂的问题，TCP采用一种自适应的算法线算出报文段的往返时间RTT，再计算一个加权平均往返时间RTTS。 不想写了，用到的话看书吧QAQ 5.5 选择确认SACK若接收方收到的分组无差错，只是没按序号，或者只有中间的几个分组丢失了，能不能告诉发送方只发送这几个分组？ 没错，这玩意就是解决这个问题的，要在TCP建立连接时在扩展首部里加上“允许SACK”选项 具体内容不写了，QAQ 6 TCP流量控制6.1 利用滑动窗口实现流量控制流量控制就是让发送方的发送速率不要太快，要让接收方来得及接收 TCP是面向字节流的，seq代表发送字节的序号，ACK是确认位，ack是确认编号，rwnd是接收端允许发送端发送的数据窗口大小 图中最后rwnd置0，说明此时A不能再发送字节了，要是之后B发送重置rwnd时确认丢失，就会产生死锁，解决方案就是TCP的每条连接都有一个持续计时器，在发送端收到rwnd置0消息时开启，超时后发送端发送一个1字节的零窗口探测报文段，这样接收端就知道响应报文丢失了。 6.2 TCP的传输效率对于UDP来说，什么时候发送报文是应用程序决定的，UDP只需要原封不动的转发就行。但是对于TCP，应用进程把数据传送到TCP的发送缓存后就不管了，所以TCP是什么时候发送报文就是一个很重要的问题，有下面几种机制来发送： TCP维持一个最大报文段长度MSS变量，只要缓存中数据达到MSS字节就发送 发送方的应用进程指明要求发送报文段，即TCP支持推送操作 用一个计时器规定时间，到点发送 Nagle算法：发送方先发送第一个数据字节，将后续应用程序输入的字节保存在发送缓存，收到接收方的确认后，将攒了一波的数据发送出去（当然不能超过MSS），同时继续保存发送缓存。在收到接收方确认，再发送数据报。另外，当发送缓存中数据已经到达窗口大小的一半或已达到报文段的最大长度时，就立即发送一个报文段。 糊涂窗口综合症： 这个玩意是指TCP接收方的缓存已经满了，并且接受方的应用程序比较懒，一次处理一个字节，那么接收缓存每次仅仅空出一个字节还每次都发送确认（并把rwnd设置为1，导致发送方每次有效传输只有1字节），发送1字节还要加上TCP首部20字节，IP首部20字节，这样效率实在太低 解决方案可以让接收方等一会，等接收缓存空出来一个最大报文段或者等到接收缓存有一半以上空地方 总结： 发送效率主要就是要减少40字节的首部的占比，所以记住发送方别发送太短的报文，接收方也别没事就发信号让发送方发报文就完事了。 6.3 吞吐量吞吐量是指一个传输周期内传输的字节速率，注意单位是bit/s，经常会有和发送窗口相关的计算题 一个TCP连接下面使用256Kb/s的链路，其端到端时延为128ms。经测试，发现吞吐量只有120kb/s，则发送窗口大约是 A．3614字节B．7228字节C．57826字节D．120k比特 本题目主要考查的是“TCP流量控制”。为了提高报文段的传输效率，TCP采用大小可变的滑动窗口进行流量控制。窗口大小的单位为字节。发送窗口在连接建立时由双方商定。但在通信的过程中，接收端可根据自己的资源情况，随时动态地调整对方的发送窗口上限值。发送端利用发送窗口调节向网络注入分组的速率不仅是为了使接收端来得及接收，而且还是为了对网络进行拥塞控制。在每一个运输连接上报文段是断续发送的，这样就有了两种速率。一种是链路层的数据率，另一种是从运输层看到的数据注入速率。题目中给出端到端时延为128ms，则在一个传输周期里，从发送第一个报文段到收到所有确认时间为：W/R+2T，其中w为发送窗口的大小，R为链路速率，T为端到端时延。因此吞吐量TP=W/(W/R+2T)，将题目中的具体数据代入，即可求得W=7228字节。 7 TCP的拥塞控制7.1 拥塞控制概念拥塞控制就是防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不会过载 拥塞控制和流量控制的区别是：拥塞控制涉及到是整条通信线路上所有的资源（主机，路由器，链路等等），所以需要控制调整的措施也比较复杂。而流量控制是端到端的交流，就是接收端告诉发送端你慢点，我吃不消了QAQ 拥塞控制主要分为两种方法： 开环控制：在设计网络时将会导致拥塞的因素都考虑到，运行时就基本不能改了 闭环控制：基于反馈环路，几种措施 ​ 1.监测网络拥塞发生在何处 ​ 2.把拥塞信息传达到可以采取行动的地方 ​ 3.调整网络系统的运行解决问题 7.2 TCP的拥塞控制方法TCP进行拥塞控制的算法有四种：慢开始 拥塞避免 快重传 快恢复 首先，发送当要维持一个拥塞窗口cnwd变量，发送方让自己的发送窗口等于拥塞窗口，cnwd的单位是发送方的最大报文段SMSS，一般初始设置为1。 慢开始：意思就是初始cnwd设置为1，然后以指数方式增长 拥塞避免：当cnwd超过预设门限值ssthresh时，改为线性增大，尽量避免拥塞发生 快重传： 为了避免发送方一检测到超时就进行慢开始（有时候超时不意味着拥塞），快重传就是说发送方收到连续3次确认（因为中间一个数据报丢了，后边的收到了累计确认），这时发送方直接重传丢失数据报 快恢复： 3ACK后不进行慢开始，而是直接把cnwd置为一半 这就是所谓的加法增大，乘法减小 另外发送窗口大小还取决于接收方的通知窗口，所以发送窗口取值=MIN[rnwd,cnwd] 主动队列管理AQM 在通信链路中的路由器中，路由器缓存队列一般都是先进先出，而一旦发生拥塞后来的分组就会被路由器丢弃，那么发送方就会进行慢开始，而由于TCP的复用特性（路由器接到的都是IP数据报，同一个IP地址可能包装了不同的端口号），这就会导致一时间整个网络很多的TCP连接都慢开始了，这种现象叫全局同步，严重影响了传送效率 而AQM就是解决这个问题的，AQM其中一种方法叫随机早期检测RED，其实就是给路由器的缓存设置一个门限值，不让它到满了的时候再丢弃，用一个随机算法在它超过门限时就随机丢弃，这就保证了不是所有TCP都会同时慢开始了。 8.TCP的运输连接管理TCP连接三个阶段：连接建立，数据传送，连接释放 TCP连接建立采用客户服务器方式 8.1 连接建立就是著名的三次握手啦 SYN报文不允许携带数据，但是消耗一个序号 ACK报文携带数据的话消耗序号，不携带的话不消耗序号 为什么最后A一定要在发送一次确认给B呢？ 这是因为假设A发送请求滞留在路由器里导致超时了，这是A以为报文丢了就重发了一个请求与B建立了连接通信后又断开连接。然后这是A的第一个请求报文到达了B，B就会发送确认给A，此时A知道已经连接完了不搭理B，但B还会傻傻的等着A给他发消息，这就浪费了很多资源。 8.2 连接释放四次挥手 FIN不携带数据，但是消耗序号 ACK不携带数据不消耗序号，携带消耗 MSL叫做最长报文段寿命，为什么time-wait状态后要有2MSL等待时间呢？ 1.因为B再发送完FIN-ACK确认报文后还在等着A发送确认，而A的最后一个确认报文可能会丢失，丢失了B收不到确认就会发送重传，此时如果没有2MSL时间A直接结束了连接，B就会一直发确认，资源浪费 2.就是上边提到的A重复发送连接请求，第一个请求延迟到达了的情况，有了2MSL就能使本连接持续时间内产生的所有报文段都从网络中消失 保活计时器：有时候建立连接后客户端突然挂掉，这是服务器就会一直等着，所以要有这个保活计时器，服务器没收到一次数据就重置保活计时器，时间大约2小时，2小时没有新的数据，服务器就发送一个探测报文段，每75s发送一次，连续10次无反应服务器就关闭连接 8.3 TCP状态机","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://icecorn.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://icecorn.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}]},{"title":"计算机网络--网络层","slug":"计算机网络--网络层","date":"2022-02-13T08:53:09.000Z","updated":"2022-06-29T10:20:16.253Z","comments":true,"path":"2022/02/13/计算机网络--网络层/","link":"","permalink":"http://icecorn.github.io/2022/02/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C--%E7%BD%91%E7%BB%9C%E5%B1%82/","excerpt":"","text":"计算机网络–网络层1 网络层的两种服务形式一种是虚电路服务，另一种是数据报服务，虚电路面向连接的通信方式，在分组交换中建立一条虚电路来预留通信双方所需的一切网络资源，这样在网络层实现可靠传输。数据报服务是采用分组传输方式，网络层向上只提供简单的，无连接的，尽最大努力的不可靠传输。 本质是是否要在网络层实现可靠传输的问题，由于现在的终端相比于过去的电话设备具有更强的处理能力，所以现在数据报服务成为主流，将可靠传输的实现上移到传输层和用户主机由TCP处理。 对比 虚电路 数据报 思路 可靠通信由网络层保证 可靠通信由用户主机保证 连接建立 必须有 不需要 终点地址 仅在建立连接时使用，每个分组使用短的虚电路号 每个分组都有终点的完整地址 分组转发 同一条虚电路分组由同一路由器转发 每个分组独立选择路由器转发 结点故障 所有通过故障结点的虚电路均不能工作 出故障结点可能会丢失分组，但可以选择其他路由器发送分组 分组的顺序 总是按发送顺序到达终点 到达终点不一定按先后顺序 端到端差错处理及流量控制 可以由网络负责也可以由用户主机负责 由用户主机负责 2 网际协议IPIP协议是很重要的协议，它也是一族协议 除了IP协议外还有与之配套的 地址解析协议 ARP 网际控制报文协议 ICMP 网际组管理协议 IGMP 要把世界上数以万计的网络连接起来是非常复杂的，并且没有一种网络能够满足所有用户的需求。所以，在网络层使用IP协议构成一个虚拟互连网络，也就是说对于ip协议的网络层，下边的数据链路层和物理层是透明的。 2.1 分类的IP地址IP地址就是给互联网上每一台主机或路由器分配一个全世界范围内唯一的32位的标识符，这里只研究IPv4。 IP地址的编码方式经历了三个阶段： 分类的IP地址 划分子网 构成超网 本节研究分类的IP地址，就是将IP地址划分为若干个固定类，每一类地址由两个固定长度字段组成，第一个字段是网络号，第二个阻断是主机号，全网唯一 分为以下几类： 其中A B C类都是单播地址（1对1） A B C类地址网络号分别为1,2,3字节，且网络号前边类别位分别为0,10,110 D类地址是多播地址，类别位1110 E类地址目前不使用 采用点分十进制来记录IP，如128.0.0.1 常见的三类IP地址 对于A B C类IP地址来说，都有几个不能指派的网络号和主机号 对A类地址，网络号全0不能指派，用来表示“此网络”，全1也不能指派，用来表示“环回测试”；主机号全0表示“本主机”，全1表示“所有主机” 对B类和C类地址，因为网络号有类别码10和110故不存在全0全1，但去除掉类别码后的网络号也不能设置为全0，表示的意义和A类一样；主机号也不能全0全1 IP地址特点： 由网络号+主机号组成，分配时只分配网络号，主机号由单位自行分配。另一个好处是路由器转发时可以根据网络号转发分组，减少路由表存储空间 实际上IP地址标志一台主机和一条链路的接口，这意味着路由器两端连接两个网络就必然拥有两个IP地址，而连接两个网络的主机叫做多归属主机 一个网络通常是指网络号相同的网络，所以用转发器和网桥连接起来的局域网通常认为是一个网络 IP地址中，所有分配到网络号的网络都是平等的 2.2 IP地址和硬件地址IP地址是逻辑地址，封装在IP数据报首部 硬件地址是物理地址，存放在适配器ROM中，封装在MAC帧首部 这里只要记住通信时网络层，数据链路层同一层级的传输都是透明的，即不需要考虑封装帧，解析帧之类的。可以理解为网络层直接传送IP数据报，数据链路层只传送MAC帧。 那么有一个问题是路由器转发IP数据报需要包装成MAC帧格式在数据链路层传输，怎么才能知道要添加的MAC地址是多少呢？换句话说怎样通过目的IP得到目的MAC地址？这就需要使用ARP地址解析协议了。 2.3 地址解析协议ARP主要作用就是根据目的IP地址找出目的MAC地址，实现方法是在每一个主机都设有一个ARP高速缓存，里边保存本局域网上各主机和路由器的IP地址到MAC地址映射表。主机A要向B发送IP数据报时，先去高速缓存查找B的映射，如果有直接就找到了，没有的话就要运行ARP根据以下步骤找到B的MAC地址。 ARP进程在本局域网上广播一个ARP请求分组，主要内容是“我的IP地址是xxx。MAC地址是xxx，我想知道IP地址是XXX的主机的硬件地址” 本局域网上所有主机的ARP进程都收到消息 主机B发现A要找的人是自己，，向A发送一个响应分组（注意这里是单播） 内容是“我的IP地址是XXX，我的MAC地址是XXX”，同时把A的映射记录在自己的高速缓存中（这一步是为了以后B向A发消息方便），非B的其他主机当然对A发送的请求分组不理睬 A收到B的响应，将B的映射记录在高速缓存中 总结就是一个喊话（广播）找人的过程，且找人必须要先自报家门让别人可以响应，喊道谁的名字谁就答应（单播），并且互相都把对方的映射记录了下来，这就方便了之后再进行通信，否则每次都要广播喊话再响应浪费资源。 另外，ARP高速缓存每一份映射都要设置生存时间（如10~20分钟），这是因为适配器可能会故障，比如B的适配器坏了，MAC地址失效了，A用失效的MAC地址也找不到B，留着没用还浪费资源，所以定期删除重新广播建立联系，确保不会有“死掉”的映射浪费资源 这里有一个最重要的点就是ARP协议是运行在同一个局域网上的，如果如下图H1要向不在同一个局域网的H4发送消息，那么首先ARP协议会找到路由器R1的MAC地址，A将MAC帧封装的IP数据报发给R1，接下来交给R1来找下一跳的路由器R2，再次运次ARP协议找到和R1同属一个网络的路由器R2的MAC地址，如此反复进行ARP解析。 那么有一个问题是既然最后在链路上传送的帧最终都是要用MAC地址送出，为什么还要用抽象的IP地址而不直接用MAC地址呢？ 这是因为全世界有各种不同的网络和设备，就有不同的硬件地址，要使这些异构网络通信就必须进行复杂的硬件地址转接工作，而使用IP地址将这些差异屏蔽掉，给用户就带来了极大的方便，对于用户来说只要关注IP地址就好了，反正ARP是自动运行的，对于用户是透明的。 2.4 IP数据报格式这里介绍IPv4，在TCP/IP中，各种数据报格式常常以32位（4字节）为单位来描述。 IP数据报由首部+数据部分组成，首部前一部分固定长度20字节，后边还有一些可选字段（一般不用，用了必须是4字节的倍数） 版本 占4位，是指IPv4或IPv6 首部长度 4位，这里必须要注意的是首部长度表示数的单位是32位（4字节，意思是首部长度是数字1实际上代表4字节），最小必须要20字节（也就是十进制5，二进制0101），最大为60字节（因为只占4位，二进制最大1111，相当于十进制15） 区分服务 8位，一般不用这个字段 总长度 16位，单位为字节。最大长度是2的16次幂-1 = 65535字节，实际一般不会这么长。这个总长度指的是首部+数据部分。这是因为总程度不能大于数据链路层的最大传送单元MTU，一般MTU = 1500，超过就要进行分片处理。分片后总长度指的是每一片的首部+数据部分 另外，大部分路由器必须能够接受长度不超过576的IP数据报，至于支不支持1500的根据路由器而定 标识 16位，这个字段是每产生一个数据报，计数器+1，将这个数写入标识符。主要作用是分片后的每一片都是这个标识，接受端根据这个标识把每一片拼在一起 标志 3位 只有前两位有意义，最低位MF（1代表后边还有分片，0标识没了）；中间位DF（1代表不允许分片，0才允许分片） 片偏移 13位 分片后每一片在原数据中的位置，意思是代表这片是从原数据何处开始的。片偏移以8个字节为偏移单位，每个分片长度一定是8的整数倍，具体结合问题去看 生存时间 8位 TTL 现在一般代表跳数，最大值为255，意味着跳了255次路由器就会把它扔掉 协议 8位 指出数据报携带的数据使用哪种协议，上交给谁。常见的有TCP UDP ICMP IGMP IP等等 首部校验和 16位 只检验首部，不包括数据部分 。这是因为每经过一个路由器可能分片信息之类的会发生变化，需要校验。不用复杂的CRC算法，使用16位反码相加的方法，具体参考书本 源地址 32位 目的地址 32位 首部可变部分：这里可以添加很多字段支持排错，安全等但是一般不用，只要记住如果使用必须要填充字节变成4的倍数 2.5 IP层分组转发流程在IP层进行分组转发，主要是根据路由器中的转发表来进行转发，本节不介绍路由器中的转发表是怎么生成和更新的，放在后边处理。 这里要注意的是每个路由器连接几个子网，并且每个子网都有若干台主机，都记录路由转发表的话数据量过多，所以路由器转发是根据网段（网络号）来转发的，并且从源地址到目的地址不是一蹴而就的（不能从开始就知道整条路径），而是进行若干个下一跳达到终点。 每条路由最主要的两个信息（目的网络地址，下一跳地址） 特定路由： 目的网络地址可以设置一个特定的路由器，直接转发到该路由器即可 默认路由： 是指路由表中没有指定跳到哪个路由器时直接转发给默认路由器进行处理（路由表中记为0.0.0.0） 分组转发算法： 从数据报首部提取目的主机的IP地址D，得出网络地址N 若N是与此路由器直连的某个地址，则直接交付 ，不需要经过别的路由器（当然这里必须使用ARP协议解析出目的主机MAC地址，封装后传输，但是研究网络层时看成透明的即可）；否则进行间接交付 ，执行3 若路由表中有目的地址为D的特定路由，则跳到特定路由 若路由表中有到网络N的路由，进行下一跳即可 若都没有，而路由表中有一个默认路由，则跳到默认路由，都没有执行6 报告分组转发出错 3 划分子网和构成超网3.1 划分子网本质是拥有许多物理网络的单位，将所属的物理网络划分为若干个子网，但是对外表现仍然是一个网络。 IP地址 = 网络号 + 子网号 + 主机号 外部路由器还是按网络号145.13.0.0找到R1，R1对内分为145.13.3.0,145.13.7.-，145.13.21.0三个子网进行转发 划分子网知识把IP地址主机号这部分再划分一下 子网掩码：由连续的1和连续的0构成的32位数据 因为IP首部没有标识子网信息的位置，所以使用子网掩码来解决，每一个路由器的路由表中都要配置一项子网掩码。使用时将目的IP地址和子网掩码按位与运算得到子网的网络号，再进行传输。 要注意的是即使没有划分子网，单使用A B C类划分地址也要有默认的子网掩码 路由器在交换路由表时，要把自己所连接的子网和对应的子网掩码同时发送交换 划分子网的目的是增加灵活性，看需求分配主机数不同的子网掩码 划分子网后路由表必须有三项内容： 目的网络地址，子网掩码，下一跳地址 分组转发比不划分子网的情况多了用子网掩码按位与操作 3.2 构成超网（无分类编址CIDR）为了应对B类地址即将用完，互联网路由表项目急速增长，IPv4地址空间将要耗尽等问题，提出了无分类域间路由选择CIDR 取消了分类地址和划分子网，采用网络前缀和主机号两级编址方式 IP地址 = 网络前缀+主机号 记为形如10.0.0.0/10 或者 00001010 00*（ *后边是主机号） 代表前10位是网络前缀，后22位是主机号 CIDR的好处主要有两个： 增加了IP地址的数量 形成地址聚合，从而减少路由表中的条目 最长前缀匹配： 使用CIDR，路由表的每个项目由网络前缀和下一跳地址来组成，而由于地址聚合的性质，同一个目的IP地址在路由表中匹配不同的CIDR可能都符合，这时就要选择匹配成功中的最长前缀的下一跳地址来转发（因为短的包含长的，换句换说长的CIDR是短的精细再分配后的） 二叉线索查找： 由于采用最长前缀匹配，那么最长采用的方法就是遍历路由表来找到最长前缀匹配，但过于浪费时间和资源，所以诞生了二叉线索查找的方法更快的找出目的前缀，具体算法参考教材 4 网际控制报文协议ICMPICMP协议是IP协议族中的，不是高层协议，因为ICMP的报文是装在IP数据报中的，作为数据部分。 类型字段代表协议类型，代码字段细分类型中的具体情况，校验和保证ICMP报文（即IP数据报数据部分）正确，还记得IP报文首部校验和只计算IP首部不计算IP数据部分吧 4.1 ICMP报文种类种类有两种： ICMP差错报告报文 ICMP询问报文 ICMP差错报告报文主要有四种： 终点不可达 时间超过：还记得IP首部生存时间字段吧，TTL为0时丢弃该IP数据报并向源点发送此条ICMP报文 参数问题：收到的数据报首部有字段值不正确发送 改变路由（重定向）：主要是默认路由器找到更优秀的线路时发送 ICMP差错报文格式如下，将要发送差错的IP数据报的首部和紧跟着的8字节（这里是端口号，为上层TCP UDP服务的）拼上ICMP前8字节（差错类型）组成ICMP差错报文发送 不该发送ICMP差错报文情况： 对ICMP差错报文，不再发送ICMP差错报文 对第一个分片数据报的后续分片不发送 对多播的数据报不发送 对特殊地址127.0.0.0/0.0.0.0（环回测试）不发送 ICMP询问报文： 回送请求和回答：测试目的站状态 时间戳请求和回答：用于时钟同步和时间测量 4.2 ICMP应用举例分组网间探测PING，测试主机间连通性，PING使用了ICMP询问报文中的回送请求和回答。注意PING应用是应用层直接使用网络层ICMP协议的一个典型例子，没有通过运输层的TCP或UDP traceroute应用，用来跟踪一个分组从源点到终点的路径 原理是源主机向终点发送一串IP数据报，数据报中封装的是无法交付的UDP用户数据报。第一个数据报的TTL设为1，第二个设为2等等。这样第一个数据报到达路径上第一个路由器R1，TTL变成0，于是R1将第一个数据报丢弃同时向源站发送ICMP时间超过报文。同理我们得到第二个路由器R2发回来的ICMP时间超时报文等等。当有一个数据报成功到达终点时，又因为UDP用户数据报无法被接受，于是终点会向源点发送ICMP终点不可达报文，这样就得到了源点到终点的整条路径。 5 互联网路由选择协议5.1 基本概念路由选择协议就是讨论路由表中的路由是怎样得出的 理想的路由算法： 算法必须是正确的和完整的 算法在计算上应简单 算法应能适应通信量和网络拓扑变化（自适应性，更新路由表） 稳定性（一段时间内端到端基本保持一条路径） 公平性（照顾到所有用户） 能够找出最佳的路径 从能否适应通信量和网络拓扑变化来划分为两大类： 静态路由选择策略（非自适应） 动态路由选择策略 互联网采用的都是动态的，分布式的路由选择协议 可以将整个互联网划分成若干个自治系统AS，比如一个大ISP，在这个基础上分为两大类： 内部网关协议IGP： 研究的是在一个AS中用的什么路由选择协议，主要有RIP和OSPF协议。这种路由选择也叫域内路由选择 外部网关协议EPG： 研究的是不同AS间主机通信的路由选择，主要用BGP-4协议。这种路由选择也叫域间路由选择 每个AS内自主决定用什么IGP，而在每个AS的边界都要有一个或者几个路由器不仅运行IGP还要运行EPG实现系统外通信 5.2 内部网关协议RIPRIP是一种基于距离向量的路由选择协议，优点是简单 可以把使用RIP协议的所有路由器想象成一张图，那么距离就是图中顶点到顶点的距离，并且RIP实际上最求的就是最短距离参考，实际上路由表中维护的就是图中每个顶点到其他顶点的最短路径 RIP将直连的两个路由器距离向量记为1（当然也可以记作0），同时RIP允许一条路径上最多包含15个路由器，因此距离16相当于不可达，这代表RIP只适用于小型互联网 不管是RIP还是OSPF都是动态分布式协议，我们要注意三个问题，和那些路由器交换信息？ 交换什么信息？ 什么时候交换信息？ RIP协议特点： 只和相邻路由器交换信息 交换全部的信息，即整个路由表 按固定时间间隔交换（30s）或者网络拓扑发生变化 距离向量算法：用相邻路由发来的信息更新自己的路由表，做个例题很容易理解 RIP报文格式： 主要掌握RIP协议使用UDP用户数据报进行传送 RIP有一个特点是好消息传播的快，坏消息传播的慢 这个主要是指R1连接的网1故障了，却收到R2之前记录的信息，从而在R1R2之间反复横跳，直到都变成16不可达，具体查看教材 5.3 内部网关协议OSPFOSPF（开放最短路径优先，因为使用了dijkstra算法）是使用分布式的链路状态协议 特点： 向AS中所有路由器发送信息，采用洪泛法 发送的信息是与本路由器相邻的所有路由器的链路状态以及代价（带宽，时延之类的） 只有链路状态发生变化时，才发送信息 通过这种方式最终所有路由器都能建立一个链路状态数据库，实际上就是全网的拓扑结构图，在全网是一致的。这样每个路由器根据这个数据库生成自己的路由表 OSPF可以支持很多的路由器接入，为了方便管理将AS划分成一些小的区域，每个区域内路由器数目最好小于200个 OSPF直接用IP数据报传送 其他优点： 建立路径时允许计算代价而不是单单看最短路径 负载平衡（几条相同代价的线路平均分配通信量） OSPF有五种分组类型： 问候分组，数据库描述分组，链路请求分组，链路状态更新，链路状态确认 OSPF规定每隔10s相邻站点发送问候分组确定有没有站点挂掉，超过40s没有回应，则用剩下4种分组进行更新操作，更新时采用可靠的洪泛法 5.4 外部网关协议BGP解决不同AS之间的路由选择问题 BGP采用路径向量路由选择协议，每个AS至少选择一个BGP发言人，一般是边界路由器，但也可以不是 需要知道的是BGP发言人之间通过建立TCP连接来交换信息，在主干网上发出生命，例如BGP1：“到达N1可以经过AS1” 6 IPv6相比IPv4主要变化： 更大的地址空间：128位 首部固定为40字节 扩展的地址层次结构：空间大，可划分层次多 灵活的首部格式：IPv6精简了首部字段，并且在数据部分支持各种扩展首部 改进的选项：允许在数据部分增加控制信息 允许协议继续扩充 支持即插即用（自动配置）：IPv6不需要DHCP 支持资源预分配 首部改为8字节对齐，IPv4是4字节对齐 版本： 4位，指明IPv6 通信量类： 8位，为了区分不同的IPv6数据报的类别或优先级 流标号： 20位，主要视为流媒体进行资源预分配 有效载荷长度： 16位，指明数据报除了基本首部的字节数，最大值65535字节 下一个首部： 8位，可选字段，标识下一个扩展首部的类型 跳数限制： 8位，就是TTL改个名 源地址： 128位 目的地址： 128位 数据报途中经过的路由器都不处理扩展首部，大大提高了路由器处理效率 IPv6数据报的目的地址可以是三种类型： 单播 同ipv4 多播 同ipv4，ipv6认为广播时特殊的多播 任播 终点是一组计算机，但只交付其中的一个，通常是最近的 IPv6使用冒号十六进制记法 68E6:8C33:FFFF:FFFF:0:DF34:2376:FFFF 中间的0可以压缩： FF05::B3 还可以结合点分十进制法表示之前的ipv4地址： ::128.0.0.1 CIDR也可以使用： 12AB:0:0:CD30::/60 IPv4向IPv6过渡 两种方法，双协议栈 隧道技术 双协议栈：将一部分的主机/路由器同时支持两种协议，不支持的网络通过转换首部来实现通信，当然不可避免会丢失一些字段 隧道技术：原理是在经过ipv4网络时，将ipv6数据报文整个封装进ipv4数据报里，出了ipv4网络再去掉。 ICMPv6是IPv6支持的控制协议，比ipv4的ICMP更加复杂，并且ICMPv6将ARP和IGMP等协议都合并到一起了 7 IP多播多播就是一对多进行传播，需要支持多播的路由器实现。多播的标识符就是IP地址中的D类地址，用一个D类地址标识一个多播组，是尽最大努力交付的（即不保证多播组中每个主机都收到消息），使用的是IGMP协议，故不产生ICMP差错报文 分为硬件多播和互联网多播 需要使用IGMP协议（使用IP数据报传送报文，即IGMP报文构成IP数据报的数据部分）和多播路由选择协议，具体查看教材 8 虚拟专用网VPN实际上一个部门内不是所有的主机都要接入互联网，给这些主机分配全球唯一IP是一种浪费，这时只给这些主机分配本地地址就可以 所以规定了一些专用地址（可重用地址），这些地址只能作为本地地址不能作为全球地址 由这些专用地址组成的网络叫做专用网，假定一个部门在两地拥有两个专用A和B，AB通信的话就要使用公用的互联网作为专用网间的通信载体，这种专用网叫做虚拟专用网VPN 9 网络地址转换NAT如果专用网内的主机已经分配了本地IP地址，但是又想和互联网连接，这时就要用到网络地址转换NAT了 方法是将专用网连接到互联网的路由器装上NAT插件，这样的路由器叫NAT路由器，它必须有至少一个全球IP地址 主机A发送数据报时，NAT路由器将数据报中的本地IP地址转换成全球IP地址用于通信，接收到目的服务器响应后将收到数据报中的全球IP地址转换成主机A的本地IP地址 同一时刻有几个全球IP地址就可以有几个专用网主机与外界通信 也可以加上端口号，这样就可以实现不同端口访问不同的外界服务器。这时一个全球IP地址就可以分配不同的端口给不同专用网内主机使用了。这样的NAT较做网络地址与端口号转换NAPT 10 多协议标记交换MPLS一种新的面向连接的协议，看书吧QAQ 特点： 支持面向连接的服务质量 支持流量工程，平衡网络负载 有效地支持虚拟专用网VPN","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://icecorn.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://icecorn.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}]},{"title":"计算机网络--数据链路层","slug":"计算机网络--数据链路层","date":"2022-02-11T09:25:10.000Z","updated":"2022-06-29T10:19:25.655Z","comments":true,"path":"2022/02/11/计算机网络--数据链路层/","link":"","permalink":"http://icecorn.github.io/2022/02/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C--%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/","excerpt":"","text":"计算机网络–数据链路层数据链路层主要研究的是同一个局域网中，数据分组怎样从一台主机传送到另一台主机，不经过路由器的转发。局域网虽然是网络但不放在网络层来研究，因为网络层主要是研究多个网络之间的互连。 数据链路层使用的信道有两种类型： 点对点信道 广播信道 1 点对点信道的数据链路层1.1 数据链路和帧链路： 链路是从一个节点到相邻节点的一段物理线路（有线或无线），而中间没有其他的交换节点。（物理链路） 数据链路： 传送数据时，还需要必要的通信协议来控制数据的传输，吧实现这些协议的硬件和软件加到链路上就构成了数据链路。（逻辑链路） 帧： 数据链路层的协议数据单元 PDU 主机A将IP数据报封装成帧→A发送帧给B→B去掉帧头帧尾取出IP数据报 另外，对于数据链路层，不需要考虑物理层，即物理层是透明的。 1.2 三个基本问题对于数据链路层有不同种协议，但都要实现三个基本的问题。分别是封装成帧，透明传输，差错检测。 封装成帧 将IP数据报加上帧头和帧尾构成帧，首部和尾部的重要作用是帧定界。 为了提高传输效率，帧的数据部分应尽可能大于首部和尾部。 帧的数据部分长度上限——最大传送单元MTU 帧定界使用特殊的帧定符： 帧开始符SOH（start of head） 十六进制编码01（二进制00000001） 帧结束符EOT（end of transmission） 十六进制编码04（二进制00000100） 透明传输 主要目的是防止传输的文件中含有和控制字符SOH或EOT相同的二进制bit导致接收方解析帧错误。 解决方案是在传输数据中出现的SOH或EOT前面加上一个转义字符ESC（十六进制编码1B，二进制00011011）。如果转义字符也出现在数据当中，那么就在ESC前再加一个ESC，接收端解析时会自动去掉前边一个，这种方法叫做字节填充或字符填充。 差错检验 通信链路会因干扰导致比特差错，即0变成1之类。为了保证传输可靠性，我们使用循环冗余检验CRC。 具体的CRC方法参考课本例题，需要知道的是CRC差错检验仅仅保证无比特差错，但这并不代表实现了可靠传输。因为还有另一类传输差错比如帧丢失，帧重复和帧失序等，由于成本原因这类问题不放在数据链路层解决，而由传输层的TCP协议来解决。即不要求数据链路层向上提供可靠的传输服务。这样可以提高通信效率。 2 点对点ppp协议ppp协议用于用户和ISP进行通信时使用的数据链路协议 2.1 ppp协议要求 简单： 意味着不可靠，只需要进行CRC校验 封装成帧： 使用帧定界符 透明性： 字节填充ESC 多种网络层协议： 要在同一条物理链路上支持多种网络层协议（如IP和IPX），连接的局域网或路由器同理 多种类型链路： 电的，光的，交换的或非交换的链路。以太网PPPOE 差错检测： CRC 检测连接状态： 及时检测链路故障的功能 最大传送单元： MTU，如果超过最大长度，ppp就将帧丢弃 网络层地址协商： 提供一种机制使通信的两个网络层实体能够知道彼此的网络层地址，IP地址 数据压缩协商： 提供一种方法来协商使用数据压缩算法 PPP协议只支持全双工链路 2.2 ppp帧格式 字段意义 首尾各一个字节标志字段F（flag，0x7E，01111110），表示帧开始和结束，连续两帧间只需要一个。连续两个标志字段代表空帧，丢弃。 首部地址字段A规定为FF，控制字段C规定为03，不能改。 首部协议字段2字节，为0x0021时表示IP数据报，0xC021表示ppp链路控制协议LCP数据，0x8021表示网络层的控制数据。 尾部FCS是CRC的帧检验序列、 信息部分最大1500字节 字节填充 和上文中字节填充一样，ppp选用转义字符为0x7D(01111101) 信息字段出现 0x7E 变成 0x7D 0x5E 信息字段出现 0x7D变成 0x7D 0x5D 信息字段出现ASCII码的控制字符（即数值小于0x20的字符）如0x23变成 0x7D 0x23 零比特填充 另一种实现透明传输的方法，适用于同步传输（一连串的比特连续发送） 具体方法是发现有5个连续的1，立刻填入一个0，因此可以保证信息字段不会出现连续的6个1（因为7E的二进制01111110），接收端发现连续的5个1时把后边的0去掉即可实现透明传输 2.3 ppp协议的工作状态简单的说就是用户点击拨号上网，此时调制解调器发出载波信号被路由器监听到，建立了一条物理连接。然后用户电脑向ISP发送链路控制协议LCP分组（封装成多个ppp帧），配置了一些参数建立LCP连接。之后进行网络层配置，网络控制协议给用户电脑分配一个临时的IP地址，实现通信。通信结束后，NCP释放网络层连接，收回IP地址，LCP释放数据链路层连接，最后释放物理层连接。 几个状态： 链路静止： 这是用户电脑和ISP路由器间无物理连接 链路建立： 拨号后，建立物理连接后进入该状态，目的建立LCP连接 鉴别： 建立LCP连接后进入该状态，发送鉴别协议分组等待鉴别 网络层协议： ppp协议两端的网络层协商所使用的网络层配置 链路打开： 此时可以正常通信 链路终止：出现故障或鉴定错误等问题时跳变的状态 3 广播信道的数据链路层3.1 局域网的数据链路层局域网优点： 具有广播功能，局域网内主机共享各种硬件软件资源 便于系统的扩展和逐渐演变，设备位置灵活调整改变 提高系统的可靠性，可用性，生存性 按网络拓扑分类： 星型网，环型网，总线网 为保证众多用户共享媒体资源，采用两种技术方法 静态划分信道： 频分，时分，波分，码分复用等等，代价高，不适合局域网使用 动态媒体接入控制：随机接入（重点），受控接入 两种以太网标准： DIX Ethernet V2标准和IEEE 802.3标准，802.3比较繁琐，所以目前主要使用的还是V2版本 适配器的作用： 适配器，即是网络接口卡（NIC 网卡），其与局域网通信是通过双绞线或无线连接等传输媒体（串行传输），与计算机通信则是通过主板上的I/O总线（并行传输）。 所以网卡中须有缓存的存储芯片来协调接受或发送网络通信内容传达给CPU进行处理。且我们说的MAC地址就在适配器的ROM之中。 3.2 CSMA/CD协议以太网采用随机接入，而一条总线网络同一时间只能传送一条信息，这就会导致会有信息的碰撞，CSMA/CD协议就是为了解决这个问题诞生的。 协议要点： 多点接入： 说明是总线型网络，多台主机接入 载波监听： 检测信道，总线上每个站时刻不停的检测信道 碰撞检测： 边发送边监听，发送时判断有没有其他站也在发送信息，发生碰撞立刻停止发送 CSMA/CD协议中的每个站不可能同时发送和接收，故只能半双工通信 把总线上单程端到端的传播时延记为T，每个站发出一个帧后最长需要经过2T时间可以知道是否发生了碰撞，故2T叫做争用期（碰撞窗口）。对于10Mbit/s的以太网，争用期时间为51.2微秒，征用期内可发送512bit，即64字节。也可以说争用期是512bit时间，用bit作为争用期的单位。 发生碰撞后以太网使用截断二进制指数退避选择重传的时机，从离散集合【0,1，…,2的k次幂-1】随机取出一个数r，等待r倍的争用期再进行重传。重传16次仍不成功，丢弃该帧，向上级反映。 重点：一种特殊情况是某个站发出了一个很短的帧，在发送完毕前没有检测到碰撞，而实际上该帧发生了碰撞并被丢弃，但发送站不知道碰撞从而不会进行重发。 为了避免这种状况，以太网规定一个最短帧长64字节，即512bit（争用期时间），不满64字节的帧要补充到64字节，所以如果收到小于64字节的帧即为错误帧，舍弃。 强化碰撞：发送站发现碰撞，立刻停止发送，并且发送32bit或48bit的人为干扰信号，此举是为了让所有的站都知道现在发生了碰撞。 帧间最小间隔： 以太网规定最小间隔为96bit时间。 3.3 以太网信道利用率因为会发生碰撞，所以以太网信道利用率不会是100%，T是bit端到端单程的时间，T1是帧的发送时间 a = T/T1 a越小信道利用率越高，故可采用的办法有两个，限制以太网连线的长度，适当增大以太网帧的长度 信道的利用率S = T/T+T1 = 1/1+a 3.4 以太网MAC层MAC地址又叫硬件地址或物理地址，是在适配器ROM中存在的具有唯一性的标识。MAC地址格式为6字节（48bit）由IEEE分配的全球唯一标识。 主机通信时，适配器使用过滤功能，主要有三种情况 单播帧（一对一）： 收到帧的MAC地址与自己的相同 广播帧（一对全体）： 发送给本局域网多有站点的帧（全1地址） 多播帧（一对多）： 发送给局域网上一部分站点，需要多播协议设置，有的适配器不支持 MAC帧的格式： 只介绍V2的帧格式： 很简单前边两个字段是目的地址和源地址，类型字段用来标志数据使用的是什么协议，0x0800代表IP数据报。数据是46~1500，46是因为最小长度64-首尾18=46。尾部FCS用于CRC校验。 另外，帧的前边有8字节的前同步码，是因为MAC帧是异步传输，需要与适配器进行时钟同步，最后一个字节是帧定界符，最后的11告诉适配器接下来的就是有用的MAC帧消息了。还有个问题是，MAC帧没有长度字段怎么确定数据部分是从哪到哪呢？ 这是因为以太网采用了曼彻斯特编码，具有自同步功能，当接受完全部的帧信息后，从后往前数4个字节就可以得到IP数据报的结束位置了，这也是MAC帧不需要结尾帧定界的原因。 3.5 以太网的扩展 物理层 物理层的以太网使用多个集线器，连接成很大范围内的以太网 好处： 可以使远端计算机互相连接 扩大了以太网范围，因为集线器最大距离只有100m 坏处： 1.碰撞域也增大了，大的以太网上同一时间也只能传送一个帧 不同速率的适配器不能连接在一起 数据链路层 网桥：可以对收到的MAC帧进行转发和过滤，根据网桥中的地址表选择转发和丢弃 交换机：实质上是一个多接口的网桥，可以使多对主机同时通信，其内部的地址表不用像网桥一样配置而是通过自学习算法自主建立的。最大的优点是每个用户可以使用独自的带宽 交换机的自学习功能： A向B发送帧，把自己的MAC地址和接口1写入地址表，然后去地址表查有没有B的地址，有就转发，没有就向除了自己的接口1之外的其他接口广播这个帧，这是B发现和自己的MAC地址一样就接受了，C D扔掉。 中心思想就是谁发帧谁登记，这样慢慢的所有主机都记录在地址表上了 另外两个交互接空闲接口多的时候广播时容易发生兜圈子现象，这是就要使用生成树协议STP从逻辑上切断某些链路 总结： 集线器工作在物理层，用它连接后的网络依然还是一个网，需要使用CSMA/CD协议，且集线器只是转发电信号而已。网桥有一定的转发过滤功能，只有两个接口，网桥两边的网络可以理解为分开的网络，是全双工的不会发生碰撞。交换机是加强版的网桥，有很多接口，全双工不会发生碰撞，并且有强大的自学习算法不需要人工配置地址表。换句话说集线器连接的网络整个都是冲突域，网桥是端口两端分别为冲突域，而交换机每个端口是一个冲突域。 3.6 虚拟局域网利用交换机实现的一种逻辑上的局域网 支持虚拟局域网的以太网帧扩展：最大长度从1518字节增加到1522字节 3.7 使用以太网进行宽带接入因为以太网帧格式中没有标识用户名字段的位置，所以采用pppoe（ppp over ethernet）的方法连接互联网。现在的光纤入户宽带接入都是采用这种方式。","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://icecorn.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://icecorn.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}]},{"title":"计算机网络--物理层","slug":"计算机网络--物理层","date":"2022-02-10T06:35:54.000Z","updated":"2022-06-29T09:48:26.452Z","comments":true,"path":"2022/02/10/计算机网络--物理层/","link":"","permalink":"http://icecorn.github.io/2022/02/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C--%E7%89%A9%E7%90%86%E5%B1%82/","excerpt":"","text":"计算机网络–物理层1. 物理层的基本概念物理层的主要任务是尽可能的屏蔽掉不同传输媒体和通信手段的差异，使物理层之上的数据链路层使用起来是透明的。物理层的协议又叫做规程。 物理层的主要任务描述为确定与传输媒体的接口有关的一些特性： 机械特性： 指明接口所用的接线器的形状，尺寸，引脚数目和排列，固定等。平时常见的各种规格的接插件都有严格的标准化规定。 电气特性： 指明在接口电缆的各条线上出现的电压的范围。 功能特性： 指明某条线上出现的某一电平的电压的意义。 过程特性： 指明对于不同功能的各种可能事件的的出现顺序。 物理层协议：点对点，多点连接，广播连接 传输媒体： 导引型传输媒体：架空明线，双绞线，同轴电缆，光缆 非导引型传输媒体： 各种波段的无线信道，微波，卫星通信 2. 数据通信的基础知识2.1 通信系统三部分： 源系统： 源点： 产生要传输数据的设备 如计算机产生数字比特流，又叫源站，信源 发送器： 比特流要经过发送器编码才能传输，典型发送器就是调制器，计算机使用内置的调制解调器 目的系统： 接收器：接受传输系统发出的信号，并转换为终端设备可处理的信号，典型接收器就是解调器，将模拟信号解调还原发送端产生的数字比特流。 终点： 从接收器获取数字比特流，显示在输出设备上，如屏幕 传输系统： 可以使简单的传输线，也可以是复杂的网络系统 消息： 话音，文字，图像，视频 数据： 运送消息的实体 信号： 是数据的电气或者电磁表现 分为模拟信号（连续信号）和数字信号（离散信号）两种 2.2 信道的概念及极限容量信道一般表示向某一个方向传送信息的媒体，一条通信电路包括一条发送信道和一条接收信道。 通信方式 信道 举例 单工通信 一条 无线广播 半双工通信 一条（正向或反向） 对讲机 全双工通信 两条（正反各一条） 手机 文字图像等信源输出的信号属于基带信号，传输不便，故需要进行调制。 调制方法： 基带调制： 将数字信号转换为另一种数字信号，变换后仍为基带信号，故称编码。 载波调制： 将基带信号频率调到较高的频段，转换为模拟信号，能更好的在模拟信道中传输，调制后的信号成为带通信号（仅在一段频率范围内能够通过信道），故也称为带通调制。 常见编码方式： 曼彻斯特编码是看周期中心的跳变是正还是负（上下），差分曼彻斯特编码是看位开始边界是否有跳变。曼彻斯特编码有自同步能力，不归零则没有。 要注意的是以上每种编码的0/1都是人为规定的，所以是可以互换的。 基本带通调制： 另外还有QAM16为代表的正交振幅调制，利用编码让每一个码元携带更多比特的信息量。 奈氏准则： 在任何信道中，码元传输的速率是有上限的，传输速率超过上限，就会出现码间串扰，影响接收端的识别。 信噪比： 信号的平均功率和噪声的平均功率之比。记作S/N，度量单位为分贝db 信噪比（db） = 10 log10（S/N）（db） 香农公式： 信道的极限信息传输速率C C = W * log2（1+S/N）(bit/s) 其中W为信道带宽（单位HZ），S为信道内信号的平均功率，N为信道内高斯噪声功率。 香农公式表明信道的带宽或信道中的信噪比越大，信息的极限传输速率就越高。 2.3 信道复用技术 频分复用 FDM： 所有用户在同一时间内占用不同的带宽资源（频带宽度HZ）。即频带分片 时分复用 TDM： 所有用户在不同时间占用同样的频带宽度。即时间分片 统计时分复用 STDM： 一种改进的时分复用，明显提高信道的利用率，又叫异步时分复用。 波分复用 WDM： 光的频分复用。分光器 码分复用 CDM： 码分多址CDMA，抗干扰能力强，广泛应用与民用的移动通信中，特别是无线局域网。 在CDMA中，每一个比特时间再划分为m个短的时间间隔，称为码片，m通常为64或128，实际就是发送64个比特来表示一个逻辑比特0或1，虽然降低了发送效率，但是完成了加密更安全。 一个站要发送比特1，则发送自己的m bit码片序列，发送0则发送码片序列的二进制补码。CDMA系统给每一个站分配的码片序列不仅必须各不相同而且必须互相正交。这样可以保证每一个码片都与其他站的码片的內积为0。另外码片自身的內积为1，自身与自身补码的內积为-1（-1代表二进制0）。 现假定一个站X要接受站S发送的数据，则X需要知道S的码片序列，在同一时刻会有很多不同的站发来数据，而此时X使用S的码片序列与接收到的比特流进行內积操作，这样X收到其他非S站的数据內积均是0，只有收到S的比特流內积可以得出1或者-1，即可获得S站发出的逻辑比特流。 2.4 宽带接入技术 ADSL 技术： 非对称数字用户线ADSL技术是用数字技术对现有的模拟电话用户线进行改造。ADSL将0~4khz的低端频谱保留给传统电话使用，4khz以上的高频谱分为上行带宽和下行带宽。 光纤同轴混合网： 即HFC网，是一种基于有线电视网的居民宽带。 FTTx技术：及光纤入户，光纤入楼。使用分光器使几十户人家共用一根光纤干线。 使用光线路终端OLT把收到的下行数据发往无源的1：N光分路器，然后用广播方式向所有用户端的光网络单元ONU发送。ONU在用户家中即是光纤入户，从ONU到个人电脑一般用以太网连接，使用5类线作为传输媒体。 3. 常见问题3.1 传输媒体是物理层吗？传输媒体和物理层的主要区别是什么？不是，传输媒体在物理层下面。由于物理层是体系结构第一层，因此有时称传输媒体为0层。在传输媒体中传输的是信号，但传输媒体并不知道所传输的信号是什么意思，即不知道传输的信号什么时候代表1，什么时候代表0。但物理层由于规定了电气特性，所以能够识别比特流。","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://icecorn.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://icecorn.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}]}],"categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://icecorn.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://icecorn.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}]}